// <auto-generated />
using System;
using FA.JustBlog.Core.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FA.JustBlog.Core.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20221004152432_IdentityTable")]
    partial class IdentityTable
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("FA.JustBlog.Core.Models.Categories", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(5000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("UrlSlug")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("37b2a62e-b9b8-456c-bcce-6c30c696575f"),
                            Description = "Demo category",
                            Name = "Category 1",
                            UrlSlug = "cat-1"
                        },
                        new
                        {
                            Id = new Guid("59918479-bfae-4794-8477-b5c0f4ad05e2"),
                            Description = "Demo category",
                            Name = "Category 2",
                            UrlSlug = "cat-2"
                        },
                        new
                        {
                            Id = new Guid("0549b13b-668a-4556-8176-e3d9abbbbefe"),
                            Description = "Demo category",
                            Name = "Category 3",
                            UrlSlug = "cat-3"
                        });
                });

            modelBuilder.Entity("FA.JustBlog.Core.Models.Comments", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CommentHeader")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("CommentText")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("CommentTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<Guid>("PostId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PostId");

                    b.ToTable("Comments");

                    b.HasData(
                        new
                        {
                            Id = new Guid("6435e4f7-c437-4b1c-9494-5a6c408d3263"),
                            CommentHeader = "Header",
                            CommentText = "A Comment Body",
                            CommentTime = new DateTime(2022, 10, 4, 22, 24, 31, 911, DateTimeKind.Local).AddTicks(6114),
                            Email = "binhtruong@gmail.com",
                            Name = "A Demo Comment 1",
                            PostId = new Guid("18d6c8da-6d80-4b5c-a94f-66e32835aede")
                        },
                        new
                        {
                            Id = new Guid("863627da-e97c-491e-9d27-0d3165806c5c"),
                            CommentHeader = "Header",
                            CommentText = "A Comment Body",
                            CommentTime = new DateTime(2022, 10, 4, 22, 24, 31, 911, DateTimeKind.Local).AddTicks(6120),
                            Email = "binhtruong@gmail.com",
                            Name = "A Demo Comment 2",
                            PostId = new Guid("18d6c8da-6d80-4b5c-a94f-66e32835aede")
                        },
                        new
                        {
                            Id = new Guid("cd5520ac-0ade-430f-920e-f6ac148d8d0c"),
                            CommentHeader = "Header",
                            CommentText = "A Comment Body",
                            CommentTime = new DateTime(2022, 10, 4, 22, 24, 31, 911, DateTimeKind.Local).AddTicks(6122),
                            Email = "binhtruong@gmail.com",
                            Name = "A Demo Comment 3",
                            PostId = new Guid("18d6c8da-6d80-4b5c-a94f-66e32835aede")
                        });
                });

            modelBuilder.Entity("FA.JustBlog.Core.Models.Posts", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoriesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Meta")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("PostContent")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("PostedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Published")
                        .HasColumnType("bit");

                    b.Property<double>("RateCount")
                        .HasColumnType("float");

                    b.Property<string>("ShortDescription")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<double>("TotalRate")
                        .HasColumnType("float");

                    b.Property<string>("UrlSlug")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("ViewCount")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoriesId");

                    b.HasIndex("UrlSlug")
                        .IsUnique();

                    b.ToTable("Posts");

                    b.HasData(
                        new
                        {
                            Id = new Guid("18d6c8da-6d80-4b5c-a94f-66e32835aede"),
                            CategoriesId = new Guid("37b2a62e-b9b8-456c-bcce-6c30c696575f"),
                            Meta = "Test",
                            PostContent = "A whatever text here",
                            PostedOn = new DateTime(2022, 10, 4, 22, 24, 31, 911, DateTimeKind.Local).AddTicks(5867),
                            Published = true,
                            RateCount = 4.5,
                            ShortDescription = "A Short Desc",
                            Title = "A Post number 1",
                            TotalRate = 50.0,
                            UrlSlug = "post-1",
                            ViewCount = 100
                        },
                        new
                        {
                            Id = new Guid("8c61ae9e-6ea9-4bfe-bc59-9e75293c3026"),
                            CategoriesId = new Guid("37b2a62e-b9b8-456c-bcce-6c30c696575f"),
                            Meta = "Test",
                            PostContent = "A whatever text here",
                            PostedOn = new DateTime(2022, 10, 4, 22, 24, 31, 911, DateTimeKind.Local).AddTicks(5883),
                            Published = true,
                            RateCount = 4.5,
                            ShortDescription = "A Short Desc",
                            Title = "A Post number 2",
                            TotalRate = 50.0,
                            UrlSlug = "post-2",
                            ViewCount = 100
                        },
                        new
                        {
                            Id = new Guid("45cf481f-d98c-471e-b235-d0a9f3b0cfcb"),
                            CategoriesId = new Guid("59918479-bfae-4794-8477-b5c0f4ad05e2"),
                            Meta = "Test",
                            PostContent = "A whatever text here",
                            PostedOn = new DateTime(2022, 4, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Published = false,
                            RateCount = 0.0,
                            ShortDescription = "A Short Desc",
                            Title = "A Post number 3",
                            TotalRate = 0.0,
                            UrlSlug = "post-3",
                            ViewCount = 0
                        });
                });

            modelBuilder.Entity("FA.JustBlog.Core.Models.PostTag", b =>
                {
                    b.Property<Guid>("PostId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TagId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("PostId", "TagId");

                    b.HasIndex("TagId");

                    b.ToTable("PostTags");

                    b.HasData(
                        new
                        {
                            PostId = new Guid("18d6c8da-6d80-4b5c-a94f-66e32835aede"),
                            TagId = new Guid("80fa9998-ca7b-4971-bce1-15f0688034c0")
                        },
                        new
                        {
                            PostId = new Guid("18d6c8da-6d80-4b5c-a94f-66e32835aede"),
                            TagId = new Guid("b32db558-8e83-47f7-94dd-b27678cf98ba")
                        },
                        new
                        {
                            PostId = new Guid("8c61ae9e-6ea9-4bfe-bc59-9e75293c3026"),
                            TagId = new Guid("80fa9998-ca7b-4971-bce1-15f0688034c0")
                        });
                });

            modelBuilder.Entity("FA.JustBlog.Core.Models.Tags", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UrlSlug")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UrlSlug")
                        .IsUnique();

                    b.ToTable("Tags");

                    b.HasData(
                        new
                        {
                            Id = new Guid("80fa9998-ca7b-4971-bce1-15f0688034c0"),
                            Count = 0,
                            Description = "A Demo tag",
                            Name = "Tag1",
                            UrlSlug = "tag-1"
                        },
                        new
                        {
                            Id = new Guid("ab0cbc9d-14e3-4c3b-a0d7-a28bd2ad471b"),
                            Count = 0,
                            Description = "A Demo tag",
                            Name = "Tag2",
                            UrlSlug = "tag-2"
                        },
                        new
                        {
                            Id = new Guid("b32db558-8e83-47f7-94dd-b27678cf98ba"),
                            Count = 0,
                            Description = "A Demo tag",
                            Name = "Tag3",
                            UrlSlug = "tag-3"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "7786d32d-f3eb-444c-bb70-6e8172ab019c",
                            ConcurrencyStamp = "0ddae8d1-8569-4442-a108-0f60b0061978",
                            Name = "Blog Owner",
                            NormalizedName = "BLOG OWNER"
                        },
                        new
                        {
                            Id = "95a1cdb8-09ca-4a78-8e97-23d111568fa8",
                            ConcurrencyStamp = "c4156964-e88c-44c4-b866-96445fc5bbcc",
                            Name = "User",
                            NormalizedName = "USER"
                        },
                        new
                        {
                            Id = "3f685516-1abd-4315-8831-a5a03c58e76f",
                            ConcurrencyStamp = "c0e14bba-55cf-4905-a7f9-97a7e996e2ab",
                            Name = "Contributor",
                            NormalizedName = "CONTRIBUTOR"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "5d8610ce-c87e-44de-b63d-db947edc8a16",
                            RoleId = "7786d32d-f3eb-444c-bb70-6e8172ab019c"
                        },
                        new
                        {
                            UserId = "3c97c3a6-5626-445c-a7cc-df5da48b7df7",
                            RoleId = "7786d32d-f3eb-444c-bb70-6e8172ab019c"
                        },
                        new
                        {
                            UserId = "149d42c3-9385-467c-934b-1d4d18b415b5",
                            RoleId = "7786d32d-f3eb-444c-bb70-6e8172ab019c"
                        },
                        new
                        {
                            UserId = "f91b9d5b-cb78-4410-9eda-a085f3219e7b",
                            RoleId = "3f685516-1abd-4315-8831-a5a03c58e76f"
                        },
                        new
                        {
                            UserId = "017888d8-e46a-4a2f-b207-7df331fe49e4",
                            RoleId = "3f685516-1abd-4315-8831-a5a03c58e76f"
                        },
                        new
                        {
                            UserId = "7ee8dfab-7cf9-4f1b-b9ea-5f92e11af797",
                            RoleId = "3f685516-1abd-4315-8831-a5a03c58e76f"
                        },
                        new
                        {
                            UserId = "e52e436f-03f8-4d09-911e-60c7b41e58ab",
                            RoleId = "95a1cdb8-09ca-4a78-8e97-23d111568fa8"
                        },
                        new
                        {
                            UserId = "d77e4bf3-a0a1-4eb5-9e61-901b51dfcd4d",
                            RoleId = "95a1cdb8-09ca-4a78-8e97-23d111568fa8"
                        },
                        new
                        {
                            UserId = "c3cb4a1a-eaf3-4f18-9626-2e72301b8bd1",
                            RoleId = "95a1cdb8-09ca-4a78-8e97-23d111568fa8"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("FA.JustBlog.Core.Models.BlogUsers", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("BlogUsers");

                    b.HasData(
                        new
                        {
                            Id = "5d8610ce-c87e-44de-b63d-db947edc8a16",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a6020c1a-826d-407d-a5c0-80f27f24ab95",
                            Email = "admin@localhost.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@LOCALHOST.COM",
                            NormalizedUserName = "ADMIN@LOCALHOST.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEBr8sA8tqxl6WqJV14opWs/0QCWrF1O4vly0Q+ZqXnSMWSut0NHA+6vUPY+fYq/Zgw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "0646b46b-f61b-4d14-94c6-006e9a731f62",
                            TwoFactorEnabled = false,
                            UserName = "admin@localhost.com",
                            FirstName = "System",
                            LastName = "Admin"
                        },
                        new
                        {
                            Id = "3c97c3a6-5626-445c-a7cc-df5da48b7df7",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4dbfad5b-828f-49f7-8685-cc967abe38d3",
                            Email = "mod1@localhost.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "MOD1@LOCALHOST.COM",
                            NormalizedUserName = "MOD1@LOCALHOST.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEOjmt91aYepOfX8vQ4IpcRvpO0+YncpXSxN0Uw7z/yBv0W8nQ4b888Qn5YATFiu3PA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "7740a616-3fd1-4491-9a98-d82c6f09a7a1",
                            TwoFactorEnabled = false,
                            UserName = "mod1@localhost.com",
                            FirstName = "System",
                            LastName = "Administrator 2"
                        },
                        new
                        {
                            Id = "149d42c3-9385-467c-934b-1d4d18b415b5",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2a737093-bf1a-4410-848b-237c15127739",
                            Email = "mod2@localhost.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "MOD2@LOCALHOST.COM",
                            NormalizedUserName = "MOD2@LOCALHOST.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEFeB4mAKFp0S/Apn1EQwgsKEjVu5Ll3ff1I3DtFM02nYO2+RhBRyT/5icZRxPsy1Pg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "3c86a064-372c-4129-8c42-b078d51294af",
                            TwoFactorEnabled = false,
                            UserName = "mod2@localhost.com",
                            FirstName = "System",
                            LastName = "Administrator 3"
                        },
                        new
                        {
                            Id = "f91b9d5b-cb78-4410-9eda-a085f3219e7b",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a97dc22a-767d-40f1-b1ad-e590ef538431",
                            Email = "contributor@localhost.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "CONTRIBUTOR@LOCALHOST.COM",
                            NormalizedUserName = "CONTRIBUTOR@LOCALHOST.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEMfmjKM4fxdYLD+h6CIfSKLUEwMpu2OSjKq2+/xRLzKYqm2XcV40NCEo1gV44SAwnw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a9cc2618-8580-4076-b1ed-1227907b43c0",
                            TwoFactorEnabled = false,
                            UserName = "contributor@localhost.com",
                            FirstName = "System",
                            LastName = "Contrubutor 1"
                        },
                        new
                        {
                            Id = "017888d8-e46a-4a2f-b207-7df331fe49e4",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "307e1b30-71f5-4e34-a77c-36b26b9a6a80",
                            Email = "contributor2@localhost.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "CONTRIBUTOR2@LOCALHOST.COM",
                            NormalizedUserName = "CONTRIBUTOR2@LOCALHOST.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEH35EXlmVHzUXmheu/ZzH4xPneVKtivIYHJ3ssWjfKGisj2VhZIVBjJIUHTqyaDtxQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "26aa2b77-4d7b-46a7-b21d-c329bc2a3077",
                            TwoFactorEnabled = false,
                            UserName = "contributor2@localhost.com",
                            FirstName = "System",
                            LastName = "Contributor 2"
                        },
                        new
                        {
                            Id = "7ee8dfab-7cf9-4f1b-b9ea-5f92e11af797",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c923fb17-fb12-418c-a3b0-9775b471abbc",
                            Email = "contributor3@localhost.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "CONTRIBUTOR3@LOCALHOST.COM",
                            NormalizedUserName = "CONTRIBUTOR3@LOCALHOST.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEDuuwL9ui5DnaVXdZGdVNns47VSXiNl5XaUvJB/uc0G4Lx7EmAsShV2qdpxXjoEgGw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b074a947-5f19-4ddb-928a-f34c97fdbb92",
                            TwoFactorEnabled = false,
                            UserName = "contributor3@localhost.com",
                            FirstName = "System",
                            LastName = "Contributor 3"
                        },
                        new
                        {
                            Id = "e52e436f-03f8-4d09-911e-60c7b41e58ab",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "83a63ce4-b776-4d1b-880e-4be7e553ffff",
                            Email = "user1@localhost.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER1@LOCALHOST.COM",
                            NormalizedUserName = "USER1@LOCALHOST.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEOmjcaGVV2uAoQKpFL7iP5i89XAYhqdZ5pPS6ssUKI8nnXev0mRF8YLRWfpsQRcHww==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "cff39f41-a66e-4a64-9a5d-71e9e66f10fe",
                            TwoFactorEnabled = false,
                            UserName = "user1@localhost.com",
                            FirstName = "System",
                            LastName = "User 1"
                        },
                        new
                        {
                            Id = "d77e4bf3-a0a1-4eb5-9e61-901b51dfcd4d",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7f8c3f34-15a3-4a67-95a2-43648f55a2ab",
                            Email = "user2@localhost.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER2@LOCALHOST.COM",
                            NormalizedUserName = "USER2@LOCALHOST.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEJB9DHOv4gwT6641cfUTF8u5bFiktX0MIMzUtIl7jaPj/xFvq28TdTTv9ObOKfztNg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "1ce046ad-86b2-448b-aea6-2afc2efb8a1e",
                            TwoFactorEnabled = false,
                            UserName = "user2@localhost.com",
                            FirstName = "System",
                            LastName = "User 2"
                        },
                        new
                        {
                            Id = "c3cb4a1a-eaf3-4f18-9626-2e72301b8bd1",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a13dd5c1-7b8b-4c55-9e21-632dcfa87904",
                            Email = "user3@localhost.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER3@LOCALHOST.COM",
                            NormalizedUserName = "USER3@LOCALHOST.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEHLDklm685LD658LfYr83iQ35tailTo2ADCroTsfFaMl9uJTJXcZtOVjSjZ0tYAT9Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "015115de-e54b-44ed-9680-851d85d2b0f5",
                            TwoFactorEnabled = false,
                            UserName = "user3@localhost.com",
                            FirstName = "System",
                            LastName = "User 3"
                        });
                });

            modelBuilder.Entity("FA.JustBlog.Core.Models.Comments", b =>
                {
                    b.HasOne("FA.JustBlog.Core.Models.Posts", "Posts")
                        .WithMany("Comments")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Posts");
                });

            modelBuilder.Entity("FA.JustBlog.Core.Models.Posts", b =>
                {
                    b.HasOne("FA.JustBlog.Core.Models.Categories", "Categories")
                        .WithMany("Posts")
                        .HasForeignKey("CategoriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Categories");
                });

            modelBuilder.Entity("FA.JustBlog.Core.Models.PostTag", b =>
                {
                    b.HasOne("FA.JustBlog.Core.Models.Posts", "Posts")
                        .WithMany("PostTags")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FA.JustBlog.Core.Models.Tags", "Tags")
                        .WithMany("PostTags")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Posts");

                    b.Navigation("Tags");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FA.JustBlog.Core.Models.Categories", b =>
                {
                    b.Navigation("Posts");
                });

            modelBuilder.Entity("FA.JustBlog.Core.Models.Posts", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("PostTags");
                });

            modelBuilder.Entity("FA.JustBlog.Core.Models.Tags", b =>
                {
                    b.Navigation("PostTags");
                });
#pragma warning restore 612, 618
        }
    }
}
